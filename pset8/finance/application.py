import os
import datetime

from cs50 import SQL
from flask import Flask, flash, jsonify, redirect, render_template, request, session
from flask_session import Session
from tempfile import mkdtemp
from werkzeug.exceptions import default_exceptions, HTTPException, InternalServerError
from werkzeug.security import check_password_hash, generate_password_hash

from helpers import apology, login_required, lookup, usd

# Configure application
app = Flask(__name__)

# Ensure templates are auto-reloaded
app.config["TEMPLATES_AUTO_RELOAD"] = True


# Ensure responses aren't cached
@app.after_request
def after_request(response):
    response.headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
    response.headers["Expires"] = 0
    response.headers["Pragma"] = "no-cache"
    return response


# Custom filter
app.jinja_env.filters["usd"] = usd

# Configure session to use filesystem (instead of signed cookies)
app.config["SESSION_FILE_DIR"] = mkdtemp()
app.config["SESSION_PERMANENT"] = False
app.config["SESSION_TYPE"] = "filesystem"
Session(app)

# Configure CS50 Library to use SQLite database
db = SQL("sqlite:///finance.db")

# Make sure API key is set
if not os.environ.get("API_KEY"):
    raise RuntimeError("API_KEY not set")


@app.route("/")
@login_required
def index():
    """Show portfolio of stocks"""

    # —É–∑–Ω–∞—ë–º id –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    idSess = session['user_id']
    # print("ololo-index")            # ololo-index
    # print(idSess)                   # [{'id': 54}] —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –Ω–æ 54 –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!
    # –ü–û–ß–ï–ú–£ –ü–†–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –ò –ü–†–ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ID C–ï–°–°–ò–ò –ü–†–ò–•–û–î–ò–¢ –í –†–ê–ó–ù–û–ú –§–û–†–ú–ê–¢–ï?????????? –ø–æ—Ç–æ–º—É —á—Ç–æ —è —Ç–∞–∫ –ø–µ—Ä–µ–¥–∞–≤–∞–ª–∞ –≤ –º–µ—Ç–æ–¥–µ —Ä–µ–≥–∏—Å—Ç–∞—Ä—Ü–∏–∏ )))
    # print(idSess[0]['id'])          # 54    # –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ç–∞–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ—Ç ("—É —á–∏—Å–ª–∞ –Ω–µ—Ç –∏–Ω–¥–µ–∫—Å–∞")

    # –ù–û –ï–°–õ–ò –≠–¢–û –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –¢–û id=idSess[0]['id'] üêç
    # –±–µ—Ä—ë–º –æ—Å—Ç–∞—Ç–æ–∫ –∫—ç—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Users
    userCash = db.execute("SELECT cash FROM users WHERE id = :id", id=idSess)
    # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É —Ñ—É–Ω–∫—Ü–∏–µ–π –∏–∑ —Ö–µ–ª–ø–µ—Ä–∞
    userCashFormat = usd(userCash[0]['cash'])

    # –ü–†–û–í–ï–†–ö–ê - –ï–°–¢–¨ –õ–ò –ü–û–ö–£–ü–ö–ò –£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø - (–ò–ù–ê–ß–ï –û–ë–†–ê–©–ï–ù–ò–ï –í –ë–î –ü–û USER_ID, –ö–û–¢–û–†–û–ì–û –¢–ê–ú –ù–ï–¢)
    allUserId = db.execute("SELECT DISTINCT user_id FROM portfolio_more")
    # print(allUserId)

    # –ï–°–õ–ò –¢–ê–ö–û–ô ID –£–ñ–ï –ï–°–¢–¨ –í –ë–î (–¢.–ï. –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –£–ñ–ï –í–õ–ê–î–ï–ï–¢ –ê–ö–¶–ò–Ø–ú–ò - –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø), –û–¢–û–ë–†–ê–ñ–ê–ï–ú –ò–ù–§–£
    for any in allUserId:
        # print(any['user_id'])
        # print(idSess)
        if (any['user_id'] == idSess):
            # print("alohaha!-index")

            # –¥–µ–ª–∞–µ–º –≤—ã–±–æ—Ä–∫—É –≤—Å–µ—Ö –ø–∞–∫–µ—Ç–æ–≤ –∞–∫—Ü–∏–π –∏ –≤—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π –≤ –∫–∞–∂–¥–æ–º –ø–∞–∫–µ—Ç–µ (—Å–∫–∞–ª–∞–¥—ã–≤–∞–µ–º –≤–Ω—É—Ç—Ä–∏ –ø–∞–∫–µ—Ç–∞)
            symbShar = db.execute(
                # "SELECT DISTINCT symbol, SUM(shares) FROM portfolio_more GROUP BY symbol HAVING user_id = :user_id", user_id=idSess) # –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - –°–õ–û–ñ–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢ –ù–ï–í–ï–†–ù–û
                "SELECT DISTINCT symbol, SUM(shares) FROM portfolio_more GROUP BY symbol, user_id = :user_id HAVING user_id = :user_id", user_id=idSess)
            print(symbShar)
            # [{'symbol': 'abc', 'SUM(shares)': 5}, {'symbol': 'nflx', 'SUM(shares)': 3}]

            # # –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π
            # viewSymbol=symbShar[0]['symbol']
            # print(viewSymbol)

            # –∑–∞–≤–æ–¥–∏–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –õ–ö
            infoView = []
            # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤
            totalSum = 0
            # –¥–æ–±–∞–≤–ª—è–µ–º –≤ —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω–æ—Ñ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∏–ø—É –∞–∫—Ü–∏–∏
            for i in symbShar:
                # –ï–°–õ–ò –ö–û–õ–ò–ß–ï–°–¢–í–û –ê–ö–¶–ò–ô –ù–ï –ù–û–õ–¨
                if (int(i['SUM(shares)']) != 0):
                    print(i)
                    # –∑–∞–≤–∞–æ–¥–∏–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∞–∫—Ü–∏–∏
                    infoViewLocal = {}
                    # –¥–æ–±–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª –∞–∫—Ü–∏–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
                    infoViewLocal.update({'symbol': i['symbol'].upper()})
                    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–æ–π –∞–∫—Ü–∏–∏
                    infoViewLocal.update({'shares': i['SUM(shares)']})
                    # —É–∑–Ω–∞—ë–º –ø–æ API –¥–æ–ø.–¥–∞–Ω–Ω—ã–µ –ø–æ —ç—Ç–æ–π –∞–∫—Ü–∏–∏ (–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∞–∫—Ü–∏–∏)
                    quote = lookup(i['symbol'])
                    # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏, –ø—Ä–æ–¥–∞—é—â–µ–π –∞–∫—Ü–∏–∏
                    infoViewLocal.update({'name': quote['name']})
                    # –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∞–∫—Ü–∏–∏
                    infoViewLocal.update({'price': quote['price']})
                    # –≤—ã—á–∏—Å–ª—è–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Ü–µ–Ω—É –ø–∞–∫–µ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π
                    tot = i['SUM(shares)'] * quote['price']
                    total = usd(i['SUM(shares)'] * quote['price'])
                    # –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Ü–µ–Ω—É –ø–∞–∫–µ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π
                    infoViewLocal.update({'total': total})

                    # –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø–æ –¥–∞–Ω–Ω–æ–π –∞–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
                    infoView.append(infoViewLocal)

                    # –≤—Å–µ –∞–∫—Ç–∏–≤—ã = —Å—É–º–º–∞ –≤—Å–µ—Ö –∞–∫—Ü–∏–π + —Å–≤–æ–±–æ–¥–Ω—ã–π –∫—ç—à (–º–µ–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ add cash)
                    # totalSum = usd(int(userCash[0]['cash']) + i['SUM(shares)'] * quote['price'])  # –°–ß–ò–¢–ê–ï–¢–°–Ø –ù–ï–í–ï–†–ù–û
                    totalSum = totalSum + tot
                    # print(totalSum)

                # print(infoView)

            totalSum = usd(totalSum + float(userCash[0]['cash']))

            return render_template("index.html", infoView=infoView, userCashFormat=userCashFormat, totalSum=totalSum)

    # –ò–ù–ê–ß–ï –ü–†–û–°–¢–û –û–¢–û–ë–†–ê–ñ–ê–ï–ú –ò–ù–î–ï–ö–° c –∫—ç—à–µ–º –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º–æ–π (–æ–Ω–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ü–∏–π)!
    return render_template("index.html", userCashFormat=userCashFormat, totalSum=userCashFormat)



@app.route("/buy", methods=["GET", "POST"])
@login_required
def buy():
    """Buy shares of stock"""

    if request.method == "GET":
        return render_template("buy.html")

    if request.method == "POST":

        symb = request.form.get("symbol")
        shar = request.form.get("shares")

        # Ensure symobl was submitted
        if not symb:
            return apology("must provide symbol", 400)

        # Ensure shares was submitted
        if not shar or not shar.isdigit() or float(shar) < 1 or float(shar)/int(shar) > 1:
            return apology("must provide shares", 400)

        quote = lookup(symb)
        # –µ—Å–ª–∏ –∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        if (quote == None):
            return apology("invalid symbol", 400)

        price = quote['price']
        # print(price)

        # —Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
        idSess = session['user_id']
        # print(idSess)
        # print(symb)
        # print(shar)

        # —Å–º–æ—Ç—Ä–∏–º, —Å–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞–ª–∏—á–∏–∏
        userCash = db.execute("SELECT cash FROM users WHERE id = :id", id=idSess)
        # print(userCash)
        # print(userCash[0]['cash'])

        # –µ—Å–ª–∏ –¥–µ–Ω–µ–≥ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, –∏–∑–≤–∏–Ω—è–µ–º—Å—è
        if (float(userCash[0]['cash']) < price * int(shar)):
            return apology("insufficient funds", 403)

        # –µ—Å–ª–∏ –¥–µ–Ω–µ–≥ —Ö–≤–∞—Ç–∞–µ—Ç, –ø–æ–∫—É–ø–∞–µ–º –∞–∫—Ü–∏–∏
        if (float(userCash[0]['cash']) >= price * int(shar)):
            # print("todo")

            # # –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É)
            # # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –ë–î –µ—Å—Ç—å –ª–∏ —É–∂–µ —É –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–∞–∫–∏–µ –∞–∫—Ü–∏–∏
            # userPortfolio = db.execute("SELECT user_id, symbol FROM portfolio WHERE user_id = :user_id AND symbol = :symbol", user_id=idSess, symbol=symb)
            # print(userPortfolio)
            # print(len(userPortfolio))

            # # –µ—Å–ª–∏ —Ç–∞–∫–æ–π –∞–∫—Ü–∏–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ –Ω–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
            # if (len(userPortfolio) == 0):
            #     print("aloha")
            #     db.execute("INSERT INTO portfolio ('id', 'user_id', 'symbol', 'shares') VALUES (NULL, :user_id, :symbol, :shares)", user_id=idSess, symbol=symb, shares=shar)

            # # –µ—Å–ª–∏ —Ç–∞–∫–∞—è –∞–∫—Ü–∏—è —É –ø–æ–ª—å–∑–æ–∞–≤—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            # intShar = int(shar)
            # print(intShar)
            # db.execute("UPDATE portfolio SET shares = shares + :intShar WHERE user_id = :user_id AND symbol = :symbol", intShar=intShar, user_id=idSess, symbol=symb)

            # –í–ê–†–ò–ê–ù–¢ –° PORTFOLIO_MORE (–∫–∞–∂–¥–∞—è –ø–æ–∫—É–ø–∫–∞ = –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ –ë–î —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞—Ç–æ–π –∏ —Ü–µ–Ω–æ–π)
            db.execute("INSERT INTO portfolio_more ('id', 'user_id', 'symbol', 'shares', 'price', 'date') VALUES (NULL, :user_id, :symbol, :shares, :price, :date)",
                       user_id=idSess, symbol=symb.upper(), shares=shar, price=price, date=datetime.datetime.now())

            # –≤—ã—á–∏—Ç–∞–µ–º –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—É—é —Å—É–º–º—É –∏–∑ –∫—ç—à–∞
            cost = price * int(shar)
            db.execute("UPDATE users SET cash = cash - :cost WHERE id = :id", cost=cost, id=idSess)

        # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ–∫—É–ø–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return redirect("/")


@app.route("/check", methods=["GET"])
def check():
    """Return true if username available, else false, in JSON format"""

    # –í–∑—è—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
    usernamesAll = db.execute("SELECT username FROM users")

    name = request.args.get("username")
    if len(name) >= 1:
        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–∞–∫–æ–≥–æ –∂–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î
        for username in usernamesAll:
            if username['username'] == name:
                return jsonify(False)
        return jsonify(True)

    return jsonify(False)


@app.route("/history")
@login_required
def history():
    """Show history of transactions"""

    # —É–∑–Ω–∞—ë–º id –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    idSess = session['user_id']
    # print(idSess)

    # –Ω–∞–¥–æ, —á—Ç–æ–±—ã –±—ã–ª–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å –≤ portfolio_more
    # –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ç–æ —á—Ç–æ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å (—Å–æ–≤–µ—Ä—à–∞–ª –ø–æ–∫—É–ø–∫–∏)!
    allPortUser = db.execute("SELECT DISTINCT user_id FROM portfolio_more")
    # print(allPortUser)

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ user_id, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ portfolio_more
    listPortUser = []
    for portUser in allPortUser:
        listPortUser.append(portUser['user_id'])
    # print(listPortUser)

    # –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –±—ã–ª–∏ –ø–æ–∫—É–ø–∫–∏, —Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º (–≤—ã–ø–∞–¥–∞—é—â–µ–π —Å–ø–∏—Å–æ–∫ Sell –∏ History —Ç–æ–∂–µ)
    for i in listPortUser:
        # print("eachhhh")
        # print(i)
        if i == idSess:

            historyUser = db.execute(
                "SELECT symbol, shares, price, date FROM portfolio_more WHERE user_id=:user_id", user_id=idSess)
            print(historyUser)

            return render_template("history.html", historyUser=historyUser)

    else:
        # print("rrr :((")
        return render_template("history.html")


@app.route("/login", methods=["GET", "POST"])
def login():
    """Log user in"""

    # Forget any user_id
    session.clear()

    # User reached route via POST (as by submitting a form via POST)
    if request.method == "POST":

        # Ensure username was submitted
        if not request.form.get("username"):
            return apology("must provide username", 403)

        # Ensure password was submitted
        elif not request.form.get("password"):
            return apology("must provide password", 403)

        # Query database for username
        rows = db.execute("SELECT * FROM users WHERE username = :username",
                          username=request.form.get("username"))

        # print("olol-login")
        # print(rows)

        # Ensure username exists and password is correct
        if len(rows) != 1 or not check_password_hash(rows[0]["hash"], request.form.get("password")):
            return apology("invalid username and/or password", 403)

        # Remember which user has logged in
        session["user_id"] = rows[0]["id"]

        # print(rows[0]["id"])

        # Redirect user to home page
        return redirect("/")

    # User reached route via GET (as by clicking a link or via redirect)
    else:
        return render_template("login.html")


@app.route("/logout")
def logout():
    """Log user out"""

    # Forget any user_id
    session.clear()

    # Redirect user to login form
    return redirect("/")


@app.route("/quote", methods=["GET", "POST"])
@login_required
def quote():
    """Get stock quote."""

    if request.method == "GET":
        return render_template("quote.html")

    if request.method == "POST":
        quote = lookup(request.form.get("symbol"))
        # –µ—Å–ª–∏ –∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        if (quote == None):
            return apology("invalid symbol", 400)
        # –µ—Å–ª–∏ –∞–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞
        else:
            return render_template("quote_info.html", name=quote['name'], price=quote['price'], symbol=quote['symbol'])


@app.route("/register", methods=["GET", "POST"])
def register():
    """Register user"""

    # –ó–∞–±—ã—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    session.clear()

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç–∏–≥ –º–∞—Ä—à—Ä—É—Ç–∞ —á–µ—Ä–µ–∑ POST (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Ñ–æ—Ä–º—É —á–µ—Ä–µ–∑ POST)
    if request.method == "POST":

        # –í–∑—è—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
        usernamesAll = db.execute("SELECT username FROM users")
        # print(usernamesAll)

        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        if not request.form.get("username"):
            return apology("must provide username", 400)

        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–∞—Ä–æ–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        elif not request.form.get("password"):
            return apology("must provide password", 400)

        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        elif not request.form.get("confirmation"):
            return apology("must provide password confirmation", 400)

        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–∞—Ä–æ–ª—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
        elif not request.form.get("password") == request.form.get("confirmation"):
            return apology("must match password and confirmation", 400)

        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–∞–∫–æ–≥–æ –∂–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î (–ó–ê–©–ò–¢–ê –û–¢ –û–¢–ö–õ–Æ–ß–ï–ù–ò–Ø JS –ù–ê –ö–õ–ò–ï–ù–¢–ï)
        for username in usernamesAll:
            if username['username'] == request.form.get("username"):
                return apology("username must be unique", 400)

        # –•–µ—à–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã –ø–æ–ª–æ–∂–∏—Ç—å —Ö—ç—à –≤ –ë–î
        hash = generate_password_hash(request.form.get("password"))

        # –î–æ–±–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∞—Ç–∞–∫ sql-–∏–Ω—ä–µ–∫—Ü–∏–π (id - –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç)
        db.execute("INSERT INTO users ('id', 'username', 'hash', 'cash') VALUES (NULL, :username, :hash, '10000.00')",
                   username=request.form.get("username"), hash=hash)

        # –í–∑—è—Ç—å id –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        userId = db.execute("SELECT id FROM users WHERE username = :username", username=request.form.get("username"))

        # –ü–æ–º–Ω–∏—Ç–µ, –∫–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ (–ß–¢–û –¢–ê–ö–û–ï user_id?) userId[0]['id']
        # –ó–ê–ü–û–ú–ò–ù–ê–ï–ú –ß–ò–°–õ–û, –ê –ù–ï –ú–ê–°–°–ò–í –° –ß–ò–°–õ–û–ú! üêû
        session["user_id"] = userId[0]['id']
        print("olol-regist")
        print(userId)

        # Redirect user to home page
        return redirect("/")

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç–∏–≥ –º–∞—Ä—à—Ä—É—Ç–∞ —á–µ—Ä–µ–∑ GET (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–∂–∞–≤ —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)
    else:
        return render_template("register.html")


@app.route("/sell", methods=["GET", "POST"])
@login_required
def sell():
    """Sell shares of stock"""

    # —É–∑–Ω–∞—ë–º id –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    idSess = session['user_id']
    # print("olol-sell")
    # print(idSess)

    # –Ω–∞–¥–æ, —á—Ç–æ–±—ã –±—ã–ª–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å –≤ portfolio_more
    # –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ç–æ —á—Ç–æ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å (—Å–æ–≤–µ—Ä—à–∞–ª –ø–æ–∫—É–ø–∫–∏)!
    allPortUser = db.execute("SELECT DISTINCT user_id FROM portfolio_more")
    # print(allPortUser)

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ user_id, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ portfolio_more
    listPortUser = []
    for portUser in allPortUser:
        listPortUser.append(portUser['user_id'])
    # print(listPortUser)

    # –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –±—ã–ª–∏ –ø–æ–∫—É–ø–∫–∏, —Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º (–≤—ã–ø–∞–¥–∞—é—â–µ–π —Å–ø–∏—Å–æ–∫ Sell –∏ History —Ç–æ–∂–µ)
    for i in listPortUser:
        # print("hahah")
        # print(i)
        if i == idSess:
            # print("popopop")

            # –¥–µ–ª–∞–µ–º –≤—ã–±–æ—Ä–∫—É –≤—Å–µ—Ö –ø–∞–∫–µ—Ç–æ–≤ –∞–∫—Ü–∏–π
            symbAll = db.execute("SELECT DISTINCT symbol FROM portfolio_more WHERE user_id = :user_id", user_id=idSess)
            # print(symbAll)

            # –∑–∞–Ω–æ—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –≤ —Å–ø–∏—Å–æ–∫
            symbAllUpper = []
            for symbEach in symbAll:
                symbAllUpper.append(symbEach['symbol'].upper())
            # print(symbAllUpper)

            if request.method == "POST":

                symb = request.form.get("symbol")
                shar = request.form.get("shares")

                # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
                if not request.form.get("symbol"):
                    return apology("must provide symbol", 400)

                if not shar or not shar.isdigit() or float(shar) < 1 or float(shar)/int(shar) > 1:
                    return apology("must provide shares", 400)

                symb = request.form.get("symbol").upper()     # –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –ø—É—Å—Ç–æ—Ç—É
                # print(symb)

                # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –æ–Ω —Ö–æ—á–µ—Ç –ø—Ä–æ–¥–∞—Ç—å
                for s in symbAllUpper:
                    if s == symb:
                        # –µ—Å–ª–∏ –µ—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π –≤ –ø–∞–∫–µ—Ç–µ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –∑–∞—è–≤–ª–µ–Ω–Ω–æ–º—É –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
                        # –†–ï–ì–ò–°–¢–† –ù–ê–ó–í–ê–ù–ò–Ø –ê–ö–¶–ò–ò –í –ë–î (–ó–ê–ù–û–°–ò–¢–°–Ø –í –í–ï–†–•–ù–ï–ú, –ü–†–û–í–ï–†–Ø–ï–¢–°–Ø –í –í–ï–†–•–ù–ï–ú - –¥–ª—è –∑–∞–Ω–µ—Å–µ–Ω–Ω—ã—Ö –≤ –Ω–∏–∂–Ω–µ–º —É–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç!...)
                        quantitySymb = db.execute(
                            "SELECT SUM(shares) FROM portfolio_more GROUP BY symbol HAVING user_id = :user_id AND symbol=:symbol", user_id=idSess, symbol=symb)
                        # print(quantitySymb)
                        # print(quantitySymb[0]['SUM(shares)'])

                        if quantitySymb[0]['SUM(shares)'] >= int(shar):
                            # —Å–æ–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–¥–∞–∂—É –∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                            # print("sell :)))")

                            # —É–∑–Ω–∞—ë–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∞–∫—Ü–∏–∏
                            quote = lookup(symb)
                            quantitySell = int(shar) * (-1)

                            # –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É –ø–æ–∫—É–ø–æ–∫ (portfolo_more) —Å—Ç—Ä–æ–∫—É —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∞–∫—Ü–∏–∏, —Ä–∞–≤–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π, + –¥–∞—Ç–∞, —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∏ —Ç.–¥.
                            db.execute("INSERT INTO portfolio_more ('id', 'user_id', 'symbol', 'shares', 'price', 'date') VALUES (NULL, :user_id, :symbol, :shares, :price, :date)",
                                       user_id=idSess, symbol=symb, shares=quantitySell, price=quote['price'], date=datetime.datetime.now())

                            # –¥–æ–±–∞–≤–∏–ª–∞ –≤ index –ø—Ä–æ–≤–µ—Ä–∫—É - –æ—Ç–æ–±—Ä–∞–∂—Ç—å, –µ—Å–ª–∏ –Ω–µ –Ω–æ–ª—å

                            # –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ–±–∞–≤–ª—è–µ–º –≤—ã—Ä—É—á–∫—É —Å –ø—Ä–æ–¥–∞–∂–∏ –∞–∫—Ü–∏–π)
                            # –≤—ã—Ä—É—á–∫–∞ = —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ * –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö
                            costSell = quote['price'] * int(shar)
                            print(costSell)
                            db.execute("UPDATE users SET cash = cash + :costSell WHERE id = :id", costSell=costSell, id=idSess)

                            # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ–∫—É–ø–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            return redirect("/")

                        else:
                            # –∏–∑–≤–∏–Ω—è–µ–º—Å—è
                            return apology("not enough shares in the package", 400)

            else:
                return render_template("sell.html", symbAllUpper=symbAllUpper)

    else:
        # print("bad :(((")
        return render_template("sell.html")


@app.route("/cash", methods=["GET", "POST"])
@login_required
def cash():
    """Get stock quote."""

    # —É–∑–Ω–∞—ë–º id –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    idSess = session['user_id']
    # print("lololo")
    # print(idSess)
    # print(idSess[0]['id'])

    if request.method == "GET":
        return render_template("cash.html")

    if request.method == "POST":

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
        if not request.form.get("cash"):
            return apology("must provide cash", 400)

        cashAdd = request.form.get("cash")

        if cashAdd.isdigit():
            cashNew = int(request.form.get("cash"))
            db.execute("UPDATE users SET cash = cash + :cashNew WHERE id = :id", cashNew=cashNew, id=idSess)
            return redirect("/")

        else:
            return apology("must provide cash (int)", 400)


def errorhandler(e):
    """Handle error"""
    if not isinstance(e, HTTPException):
        e = InternalServerError()
    return apology(e.name, e.code)


# Listen for errors
for code in default_exceptions:
    app.errorhandler(code)(errorhandler)